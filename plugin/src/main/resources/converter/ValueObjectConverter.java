import io.osguima3.jooqdsl.model.converter.Converter;

import javax.annotation.Generated;
import java.util.function.Function;

/**
 * This class is generated by jOOQ DSL.
 */
@Generated(
    value = "https://github.com/Osguima3/jooq-dsl-maven-plugin",
    comments = "This class is generated by jOOQ DSL"
)
public class ValueObjectConverter<T, U, V> implements org.jooq.Converter<T, V> {

    private org.jooq.Converter<T, U> converter;

    private Function<U, V> fromValueObject;

    private Function<V, U> toValueObject;

    private Class<T> fromType;

    private Class<V> toType;

    public ValueObjectConverter(
            Converter<T, U> converter, Function<U, V> fromValueObject, Function<V, U> toValueObject,
            Class<T> fromType, Class<V> toType) {
        this(new ConverterAdapter<T, U>(converter, fromType, null), fromValueObject, toValueObject, fromType, toType);
    }

    public ValueObjectConverter(
            org.jooq.Converter<T, U> converter, Function<U, V> fromValueObject, Function<V, U> toValueObject,
            Class<T> fromType, Class<V> toType) {
        this.converter = converter;
        this.fromValueObject = fromValueObject;
        this.toValueObject = toValueObject;
        this.fromType = fromType;
        this.toType = toType;
    }

    @Override
    public V from(T databaseObject) {
        return databaseObject == null ? null : fromValueObject.apply(converter.from(databaseObject));
    }

    @Override
    public T to(V userObject) {
        return userObject == null ? null : converter.to(toValueObject.apply(userObject));
    }

    @Override
    public Class<T> fromType() {
        return fromType;
    }

    @Override
    public Class<V> toType() {
        return toType;
    }
}
